service: kahvilat-api

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'local'}
  environment:
    FRONTEND_URL: ${opt:frontend-url, 'http://localhost:3000'}
    PGDATABASE: ${opt:pg-database, 'kahvilat_db'}
    PGHOST: ${opt:pg-host, 'localhost'}
    PGPASSWORD: ${opt:pg-password, 'kahvilat_password'}
    PGPORT: ${opt:pg-port, '5433'}
    PGUSER: ${opt:pg-user, 'kahvilat_user'}
    STAGE: ${self:provider.stage}

package:
  excludeDevDependencies: false

functions:
  get-places:
    handler: src/lambdas/get-places.handler
    events:
      - http:
          path: /places
          method: get
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    pgSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to Postgres
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0

    pgDB:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBName: ${opt:pg-database, ''}
        AllocatedStorage: 5
        DBInstanceClass: 'db.t2.micro'
        DBInstanceIdentifier: kahvilat-db-${self:provider.stage}
        Engine: 'postgres'
        EngineVersion: '11.5'
        MasterUsername: ${opt:pg-user, ''}
        MasterUserPassword: ${opt:pg-password, ''}
        VPCSecurityGroups:
          - Fn::GetAtt:
              - pgSecurityGroup
              - GroupId
      DeletionPolicy: 'Snapshot'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
