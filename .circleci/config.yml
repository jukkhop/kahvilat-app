version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  compare-url: iynere/compare-url@1.2.0

jobs:
  build-frontend:
    parameters:
      stage:
        type: string
    docker:
      - image: circleci/node:12.16.2
    parallelism: 1
    working_directory: ~/repo/frontend
    steps:
      - checkout:
          path: ~/repo
      - compare-url/reconstruct
      - compare-url/use:
          custom-logic: |
            if [[ $(git diff $COMMIT_RANGE --name-status | grep "frontend") == "" ]]; then
              echo "No changes to frontend code, skipping job."
              circleci step halt
            fi
      - attach_workspace:
          at: ~/repo/frontend
      - run: mv .env.<< parameters.stage >> .env
      - run: yarn install
      - run: yarn build
      - persist_to_workspace:
          root: ~/repo/frontend
          paths:
            - build

  deploy-frontend:
    parameters:
      distribution-id:
        type: env_var_name
      bucket-name:
        type: env_var_name
    docker:
      - image: circleci/golang:1.9.6
    parallelism: 1
    working_directory: ~/repo/frontend
    steps:
      - checkout:
          path: ~/repo
      - compare-url/reconstruct
      - compare-url/use:
          custom-logic: |
            if [[ $(git diff $COMMIT_RANGE --name-status | grep "frontend") == "" ]]; then
              echo "No changes to frontend code, skipping job."
              circleci step halt
            fi
      - attach_workspace:
          at: ~/repo/frontend
      - restore_cache:
          key: v1-pkg-cache
      - run:
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            go get -v github.com/bep/s3deploy
      - save_cache:
          key: v1-pkg-cache
          paths:
            - /go/pkg
      - run:
          name: Deploy to S3
          command: |
            s3deploy \
              -source=build/ \
              -region=$AWS_DEFAULT_REGION \
              -key=$AWS_ACCESS_KEY_ID \
              -secret=$AWS_SECRET_ACCESS_KEY \
              -distribution-id=${<< parameters.distribution-id >>} \
              -bucket=${<< parameters.bucket-name >>}

  build-and-deploy-backend:
    parameters:
      frontend-url:
        type: env_var_name
      pg-database:
        type: env_var_name
      pg-host:
        type: env_var_name
      pg-password:
        type: env_var_name
      pg-port:
        type: env_var_name
      pg-user:
        type: env_var_name
      redis-host:
        type: env_var_name
      redis-port:
        type: env_var_name
      stage:
        type: string
    docker:
      - image: circleci/node:12.16.2
    working_directory: ~/repo/backend
    steps:
      - checkout:
          path: ~/repo
      - compare-url/reconstruct
      - compare-url/use:
          custom-logic: |
            if [[ $(git diff $COMMIT_RANGE --name-status | grep "backend") == "" ]]; then
              echo "No changes to backend code, skipping job."
              circleci step halt
            fi
      - aws-cli/setup
      - restore_cache:
          keys:
            - v1-deps-cache
      - run:
          name: Install Serverless CLI and dependencies
          command: |
            sudo npm i -g serverless
            npm install
      - save_cache:
          key: v1-deps-cache
          paths:
            - node_modules
      - run:
          name: Copy node_modules folder to correct location
          command: |
            mkdir -p nodejs/node_modules
            cp -r node_modules/* nodejs/node_modules/
      - run:
          name: Create serverless production config
          command: head -n -1 serverless.yml >> serverless-<< parameters.stage >>.yml
      - run:
          name: Deploy
          command: |
            serverless deploy \
              --config serverless-<< parameters.stage >>.yml \
              --facebook-access-token $FACEBOOK_ACCESS_TOKEN \
              --frontend-url ${<< parameters.frontend-url >>} \
              --pg-database ${<< parameters.pg-database >>} \
              --pg-host ${<< parameters.pg-host >>} \
              --pg-password ${<< parameters.pg-password >>} \
              --pg-port ${<< parameters.pg-port >>} \
              --pg-user ${<< parameters.pg-user >>} \
              --redis-host ${<< parameters.redis-host >>} \
              --redis-port ${<< parameters.redis-port >>} \
              --region $AWS_DEFAULT_REGION \
              --stage << parameters.stage >> \
              --verbose

workflows:
  version: 2
  build-and-deploy-frontend-dev:
    jobs:
      - build-frontend:
          stage: dev
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          distribution-id: DEV_AWS_CLOUDFRONT_DISTRIBUTION_ID
          bucket-name: DEV_AWS_S3_BUCKET_NAME
          requires:
            - build-frontend
          filters:
            branches:
              only:
                - master

  build-and-deploy-frontend-prd:
    jobs:
      - build-frontend:
          stage: prd
          filters:
            branches:
              only:
                - production
      - deploy-frontend:
          distribution-id: PRD_AWS_CLOUDFRONT_DISTRIBUTION_ID
          bucket-name: PRD_AWS_S3_BUCKET_NAME
          requires:
            - build-frontend
          filters:
            branches:
              only:
                - production

  build-and-deploy-backend-dev:
    jobs:
      - build-and-deploy-backend:
          frontend-url: DEV_FRONTEND_URL
          pg-database: DEV_POSTGRES_DB
          pg-host: DEV_POSTGRES_HOST
          pg-password: DEV_POSTGRES_PASSWORD
          pg-port: DEV_POSTGRES_PORT
          pg-user: DEV_POSTGRES_USER
          redis-host: DEV_REDIS_HOST
          redis-port: DEV_REDIS_PORT
          stage: dev
          filters:
            branches:
              only:
                - master

  build-and-deploy-backend-prd:
    jobs:
      - build-and-deploy-backend:
          frontend-url: PRD_FRONTEND_URL
          pg-database: PRD_POSTGRES_DB
          pg-host: PRD_POSTGRES_HOST
          pg-password: PRD_POSTGRES_PASSWORD
          pg-port: PRD_POSTGRES_PORT
          pg-user: PRD_POSTGRES_USER
          redis-host: PRD_REDIS_HOST
          redis-port: PRD_REDIS_PORT
          stage: prd
          filters:
            branches:
              only:
                - production
